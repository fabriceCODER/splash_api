generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  phoneNumber  String    @unique
  passwordHash String
  role         String    @default("ADMIN") // Future role-based access
  createdAt    DateTime  @default(now())


  managers     Manager[]
  channels     Channel[]
}

model Manager {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  nationalId   String   @unique
  phone        String
  location     String
  companyName  String
  companyEmail String
  passwordHash String  // Secure manager login
  createdAt    DateTime @default(now())

  adminId      String
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  plumbers     Plumber[]
  channels     Channel[]

  reports      DailyReport[]
}

model Plumber {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  nationalId       String    @unique
  phone            String
  passwordHash     String    // Plumber login credentials
  createdAt        DateTime  @default(now())

  managerId        String
  manager          Manager   @relation(fields: [managerId], references: [id], onDelete: Cascade)

  assignedChannels Channel[] @relation("PlumberChannels")
}

model Channel {
  id              String   @id @default(uuid())
  channelId       String   @unique 
  name            String
  location        String
  stationCount    Int

  managerId       String
  manager         Manager  @relation(fields: [managerId], references: [id])

  // Relationship: Assigned to a Plumber
  plumber         Plumber? @relation("PlumberChannels", fields: [plumberId], references: [id])
  plumberId       String?

  status          String   @default("unsolved") 
  waterLost       Float? 
  solveTime       Float? 
  initialFlowRate Float? 
  statusPerStation Json?   
}

model DailyReport {
  id              String   @id @default(uuid())


  managerId       String
  manager         Manager  @relation(fields: [managerId], references: [id], onDelete: Cascade)

  solved          Int
  unsolved        Int
  waterLost       Float
  avgSolveTime    Float
  initialFlowRate Float? 
  stationStatus   Json?  
  createdAt       DateTime @default(now())
}
